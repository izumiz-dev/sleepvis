{"version":3,"sources":["components/FileInput.tsx","Logic/parseCSV.ts","components/common-components.tsx","components/visualize/DayUnit.tsx","components/Calendar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FileInput","setInputFile","onUploadImage","useCallback","e","currentTarget","files","style","padding","margin","type","accept","onChange","createDuration","cols","split","length","hours","parseInt","minutes","OuterContainer","styled","div","Title","h1","Message","Date","Frame","Days","DayUnit","duration","sleepType","DayComponent","toFormat","props","durationHeight","durationColor","durationNum","color","Calendar","calendar","flat","map","col","undefined","endTime","DateHeader","setLocale","TimesBox","startTime","heartRate","display","flexDirection","alignItems","Unit","sleepTime","goodQuality","deepSleep","toString","substring","replace","App","useState","inputFile","readCSV","setReadCSV","useEffect","reader","FileReader","onload","result","readAsText","csvString","origin","shift","pop","rows","line","DateTime","fromFormat","Duration","fromObject","wakingInBed","timeToSleep","tag","annotation","dateMappedRows","reduce","obj","data","initDateTime","weekday","startOf","minus","days","durationDays","endOf","diff","weekNum","i","date","plus","push","console","table","parseCSV","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6db13d8.chunk.js","sourcesContent":["import { useCallback } from \"react\";\n\nexport interface IInputFile {\n  setInputFile: React.Dispatch<React.SetStateAction<File | undefined>>;\n}\n\nexport const FileInput = ({ setInputFile }: IInputFile) => {\n  const onUploadImage = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (e.currentTarget.files !== null) {\n        setInputFile(e.currentTarget.files[0]);\n      }\n    },\n    [setInputFile]\n  );\n\n  return (\n    // <>\n    <div style={{ padding: \"4px\", margin: \"8px\" }}>\n      <input type=\"file\" accept=\"text\" onChange={onUploadImage} />\n    </div>\n    // </>\n  );\n};\n","import { DateTime, Duration } from \"luxon\";\n\nexport const parseCSV = (csvString: string) => {\n  // 初期状態．CSVが読み込まれる前\n  if (csvString === \"\") {\n    return false;\n  }\n  const origin = csvString.split(\"\\r\\n\");\n  // 先頭の行を削除\n  origin.shift();\n  // 末尾の行を削除\n  origin.pop();\n\n  const rows: ICol[] = origin.map((line) => {\n    const col = line.split(\",\");\n    return {\n      startTime: DateTime.fromFormat(col[0], \"yyyy-MM-dd HH:mm:ss\"),\n      endTime: DateTime.fromFormat(col[1], \"yyyy-MM-dd HH:mm:ss\"),\n      duration: Duration.fromObject(createDuration(col[2])),\n      sleepTime: Duration.fromObject(createDuration(col[3])),\n      wakingInBed: Duration.fromObject(createDuration(col[4])),\n      timeToSleep: Duration.fromObject(createDuration(col[5])),\n      goodQuality: Duration.fromObject(createDuration(col[6])),\n      deepSleep: Duration.fromObject(createDuration(col[7])),\n      heartRate: parseInt(col[8]),\n      tag: col[9],\n      annotation: col[10],\n    };\n  });\n\n  interface IDateMappedRow {\n    [key: string]: ICol;\n  }\n\n  const dateMappedRows: IDateMappedRow = rows.reduce(\n    (obj, data) => ({\n      ...obj,\n      [data.endTime.toFormat(\"yyyy-MM-dd-EEE\")]: data,\n    }),\n    {}\n  );\n\n  const initDateTime: DateTime =\n    rows[0].endTime.weekday !== 7\n      ? rows[0].endTime.startOf(\"week\").minus({ days: 1 })\n      : rows[0].endTime.startOf(\"day\");\n\n  const endDateTime: DateTime = rows[rows.length - 1].endTime\n    .endOf(\"week\")\n    .startOf(\"day\");\n\n  const durationDays = endDateTime.diff(initDateTime, \"days\").days;\n\n  const calendar: Array<Array<ICol | string>> = [];\n\n  let weekNum = 0;\n  for (let i = 0; i < durationDays; i++) {\n    const cnt = initDateTime.plus({ days: i });\n    const date = cnt.toFormat(\"yyyy-MM-dd-EEE\");\n    if (weekNum === calendar.length) {\n      calendar.push([]);\n    }\n\n    calendar[weekNum].push(dateMappedRows[date] ? dateMappedRows[date] : date);\n\n    if (i % 7 === 6) {\n      weekNum++;\n    }\n  }\n\n  console.table(calendar);\n  return calendar;\n};\n\nconst createDuration = (cols: string): { hours: number; minutes: number } => {\n  // 6:10 のような時:分の形式のとき\n  if (cols.split(\":\").length === 2) {\n    return {\n      hours: parseInt(cols.split(\":\")[0]),\n      minutes: parseInt(cols.split(\":\")[1]),\n    };\n  } else if (cols === \"--\") {\n    // \"--\"のとき とりあえず 0時間に設定\n    return {\n      hours: 0,\n      minutes: 0,\n    };\n  } else {\n    // 時間がない時 分へ\n    return {\n      hours: 0,\n      minutes: parseInt(cols),\n    };\n  }\n};\n\nexport interface ICol {\n  startTime: DateTime; //  睡眠開始時刻\n  endTime: DateTime; //  睡眠終了時刻\n  duration: Duration; //  Duration\n  sleepTime: Duration; //  睡眠時間\n  wakingInBed: Duration; //  ベッドで起きていた時間\n  timeToSleep: Duration; //  眠りにつくまでの時間\n  goodQuality: Duration; //  良質な睡眠\n  deepSleep: Duration; //  深い睡眠\n  heartRate: number; //  心拍数\n  tag: string; //  タグ\n  annotation: string; //  注釈\n}\n","import styled from \"styled-components\";\n\nexport const OuterContainer = styled.div`\n  margin-top: 2em;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-flow: column;\n`;\n\nexport const Title = styled.h1`\n  /* color: #ffffff; */\n`;\n\nexport const Message = styled.div`\n  /* color: #ffffff; */\n`;\n\nexport const Date = styled.div`\n  /* color: white; */\n  font-weight: 500;\n  margin-top: 2px;\n  font-size: 2.25rem;\n`;\n\nexport const Frame = styled.div`\n  padding: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-flow: column;\n  height: 200px;\n  margin: 4px;\n  border-radius: 8px;\n  background: #eeeeee;\n`;\n\nexport const Days = styled.div`\n  width: calc(220px * 7);\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: flex-end;\n`;\n","import { Duration } from \"luxon\";\nimport styled from \"styled-components\";\n\ninterface IDay {\n  duration: Duration | string;\n  sleepType?: string;\n}\n\nexport const DayUnit = ({ duration, sleepType }: IDay) => {\n  return (\n    <DayComponent duration={duration} sleepType={sleepType}>\n      {/* Duration | string のため string でないとき Duration 型になるので， その場合は toFormat で文字列へ */}\n      {typeof duration !== \"string\" ? duration.toFormat(\"hh:mm\") : duration}\n    </DayComponent>\n  );\n};\n\ninterface IDayDesign {\n  duration: string;\n  sleepType?: string;\n}\n\nconst DayComponent = styled.div<IDayDesign>`\n  color: rgba(0, 0, 0, 0.8);\n  font-weight: 500;\n  display: flex;\n  -webkit-align-items: center;\n  align-items: center;\n  -webkit-justify-content: center;\n  justify-content: center;\n  border-radius: 8px;\n  height: ${(props) => durationHeight(props.duration)};\n  width: 60px;\n  margin: 4px;\n  /* color: white; */\n  background: ${(props) => durationColor(props.duration, props.sleepType)};\n` as any;\n\nconst durationColor = (duration: Duration | string, sleepType?: string) => {\n  const durationNum =\n    typeof duration === \"string\" ? parseInt(duration) : duration.hours;\n  let color = \"#0099ff\";\n  if (sleepType === \"goodQuality\") {\n    color = \"#15ff00\";\n  }\n  if (sleepType === \"deepSleep\") {\n    color = \"#7700ff\";\n  }\n  if (durationNum >= 8) {\n    return color + \"FF\";\n  } else if (durationNum >= 6) {\n    return color + \"DD\";\n  } else if (durationNum >= 4) {\n    return color + \"BB\";\n  } else if (durationNum >= 2) {\n    return color + \"99\";\n  } else if (durationNum >= 0) {\n    return color + \"55\";\n  } else {\n    return \"#5e5e5edd\";\n  }\n};\n\nconst durationHeight = (duration: Duration | string) => {\n  const durationNum =\n    typeof duration === \"string\" ? parseInt(duration) : duration.hours;\n  return `${durationNum * 8 + 16}px`;\n};\n","import styled from \"styled-components\";\nimport { ICol } from \"../Logic/parseCSV\";\nimport { Days, Date, Frame } from \"./common-components\";\nimport { DayUnit } from \"./visualize/DayUnit\";\n\nexport const Calendar = ({ calendar }: { calendar: (string | ICol)[][] }) => {\n  return (\n    <Days>\n      {calendar.flat().map((col: ICol | string) => {\n        if (typeof col !== \"string\" && col.endTime !== undefined) {\n          return (\n            <>\n              <Frame>\n                <DateHeader>\n                  <Date>{col.endTime.setLocale(\"jp\").toFormat(\"MM.dd\")}</Date>\n                  <TimesBox>\n                    <div>🛌{col.startTime.toFormat(\"HH:mm\")}</div>\n                    <div>🛏{col.endTime.toFormat(\"HH:mm\")}</div>\n                    <div>❤️{col.heartRate}</div>\n                  </TimesBox>\n                </DateHeader>\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    alignItems: \"flex-end\",\n                  }}\n                >\n                  <Unit>\n                    <DayUnit duration={col.sleepTime} sleepType=\"sleepTime\" />\n                  </Unit>\n                  <Unit>\n                    <DayUnit\n                      duration={col.goodQuality}\n                      sleepType=\"goodQuality\"\n                    />\n                  </Unit>\n                  <Unit>\n                    <DayUnit duration={col.deepSleep} sleepType=\"deepSleep\" />\n                  </Unit>\n                </div>\n              </Frame>\n            </>\n          );\n        } else {\n          return (\n            <Frame>\n              <Date>{`${col\n                .toString()\n                .substring(5, 10)\n                .replace(\"-\", \".\")}`}</Date>\n              <div\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                }}\n              >\n                <DayUnit duration={\"\"} />\n                <DayUnit duration={\"\"} />\n                <DayUnit duration={\"\"} />\n              </div>\n            </Frame>\n          );\n        }\n      })}\n    </Days>\n  );\n};\n\nconst Unit = styled.div`\n  display: flex;\n  flex-flow: column;\n  justify-content: flex-end;\n  align-items: center;\n`;\n\nconst DateHeader = styled.div`\n  display: flex;\n  flex-flow: row;\n  justify-content: center;\n`;\n\nconst TimesBox = styled.div`\n  font-size: 0.75rem;\n  font-weight: 500;\n  margin-left: 1rem;\n`;\n","import { useEffect, useState } from \"react\";\nimport { FileInput } from \"./components/FileInput\";\nimport { parseCSV } from \"./Logic/parseCSV\";\nimport { Message, OuterContainer, Title } from \"./components/common-components\";\nimport { DayOfWeek } from \"./components/DayOfWeek\";\nimport { Calendar } from \"./components/Calendar\";\n\nexport const App = () => {\n  const [inputFile, setInputFile] = useState<File | undefined>();\n  const [readCSV, setReadCSV] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (inputFile) {\n      const reader = new FileReader();\n      reader.onload = () => setReadCSV(reader.result as string);\n      reader.readAsText(inputFile, \"UTF-8\");\n    }\n  }, [inputFile]);\n\n  const calendar = parseCSV(readCSV);\n\n  return (\n    <>\n      <OuterContainer>\n        <Title>Sleepvis</Title>\n        <Message>\n          AutosleepアプリのCSVを可視化するWebアプリです．\n          <br />\n          日付の右隣の時刻は，上から順に，就寝時間，起床時間，心拍数となります．\n          <br />\n          青色は睡眠時間，緑色は良質な睡眠時間，紫色は深い睡眠時間を表しています．\n          <br />\n          下のファイルを選択ボタンからエクスポートしたCSVファイルを選択してください．\n        </Message>\n        <FileInput setInputFile={setInputFile} />\n        {/* <DayOfWeek /> */}\n        {calendar && <Calendar calendar={calendar} />}\n      </OuterContainer>\n    </>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}