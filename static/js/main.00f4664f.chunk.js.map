{"version":3,"sources":["components/FileInput.tsx","Logic/parseCSV.ts","components/common-components.tsx","components/visualize/DayUnit.tsx","components/Calendar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FileInput","setInputFile","onUploadImage","useCallback","e","currentTarget","files","style","padding","margin","type","accept","onChange","parseCSV","csvString","origin","split","shift","pop","rows","map","line","col","startTime","DateTime","fromFormat","endTime","duration","Duration","fromObject","createDuration","sleepTime","wakingInBed","timeToSleep","goodQuality","deepSleep","heartRate","parseInt","tag","annotation","dateMappedRows","reduce","obj","data","toFormat","initDateTime","weekday","startOf","minus","days","durationDays","length","endOf","diff","calendar","weekNum","i","date","plus","push","console","table","cols","hours","minutes","OuterContainer","styled","div","Title","h1","Message","Date","props","dayOfWeekColor","dayOfWeek","Frame","Days","DayUnit","sleepType","DayComponent","durationHeight","durationColor","durationNum","color","Calendar","flat","undefined","DateHeader","setLocale","TimesBox","display","flexDirection","alignItems","Unit","toString","substring","replace","width","height","justifyContent","alignContent","App","useState","inputFile","readCSV","setReadCSV","setCalendar","useEffect","reader","FileReader","onload","result","readAsText","flexFlow","onClick","testData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.00f4664f.chunk.js","sourcesContent":["import { useCallback } from \"react\";\n\nexport interface IInputFile {\n  setInputFile: React.Dispatch<React.SetStateAction<File | undefined>>;\n}\n\nexport const FileInput = ({ setInputFile }: IInputFile) => {\n  const onUploadImage = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (e.currentTarget.files !== null) {\n        setInputFile(e.currentTarget.files[0]);\n      }\n    },\n    [setInputFile]\n  );\n\n  return (\n    // <>\n    <div style={{ padding: \"4px\", margin: \"8px\" }}>\n      <input type=\"file\" accept=\"text\" onChange={onUploadImage} />\n    </div>\n    // </>\n  );\n};\n","import { DateTime, Duration } from \"luxon\";\n\nexport const parseCSV = (csvString: string) => {\n  // 初期状態．CSVが読み込まれる前\n  if (csvString === \"\") {\n    return null;\n  }\n  const origin = csvString.split(\"\\n\");\n  // 先頭の行を削除\n  origin.shift();\n  // 末尾の行を削除\n  origin.pop();\n\n  const rows: ICol[] = origin.map((line) => {\n    const col = line.split(\",\");\n    return {\n      startTime: DateTime.fromFormat(col[0], \"yyyy-MM-dd HH:mm:ss\"),\n      endTime: DateTime.fromFormat(col[1], \"yyyy-MM-dd HH:mm:ss\"),\n      duration: Duration.fromObject(createDuration(col[2])),\n      sleepTime: Duration.fromObject(createDuration(col[3])),\n      wakingInBed: Duration.fromObject(createDuration(col[4])),\n      timeToSleep: Duration.fromObject(createDuration(col[5])),\n      goodQuality: Duration.fromObject(createDuration(col[6])),\n      deepSleep: Duration.fromObject(createDuration(col[7])),\n      heartRate: parseInt(col[8]),\n      tag: col[9],\n      annotation: col[10],\n    };\n  });\n\n  interface IDateMappedRow {\n    [key: string]: ICol;\n  }\n\n  const dateMappedRows: IDateMappedRow = rows.reduce(\n    (obj, data) => ({\n      ...obj,\n      [data.endTime.toFormat(\"yyyy-MM-dd-EEE\")]: data,\n    }),\n    {}\n  );\n\n  const initDateTime: DateTime =\n    rows[0].endTime.weekday !== 7\n      ? rows[0].endTime.startOf(\"week\").minus({ days: 1 })\n      : rows[0].endTime.startOf(\"day\");\n\n  const endDateTime: DateTime = rows[rows.length - 1].endTime\n    .endOf(\"week\")\n    .startOf(\"day\");\n\n  const durationDays = endDateTime.diff(initDateTime, \"days\").days;\n\n  const calendar: Array<Array<ICol | string>> = [];\n\n  let weekNum = 0;\n  for (let i = 0; i < durationDays; i++) {\n    const cnt = initDateTime.plus({ days: i });\n    const date = cnt.toFormat(\"yyyy-MM-dd-EEE\");\n    if (weekNum === calendar.length) {\n      calendar.push([]);\n    }\n\n    calendar[weekNum].push(dateMappedRows[date] ? dateMappedRows[date] : date);\n\n    if (i % 7 === 6) {\n      weekNum++;\n    }\n  }\n\n  console.table(calendar);\n  return calendar;\n};\n\nconst createDuration = (cols: string): { hours: number; minutes: number } => {\n  // 6:10 のような時:分の形式のとき\n  if (cols.split(\":\").length === 2) {\n    return {\n      hours: parseInt(cols.split(\":\")[0]),\n      minutes: parseInt(cols.split(\":\")[1]),\n    };\n  } else if (cols === \"--\") {\n    // \"--\"のとき とりあえず 0時間に設定\n    return {\n      hours: 0,\n      minutes: 0,\n    };\n  } else {\n    // 時間がない時 分へ\n    return {\n      hours: 0,\n      minutes: parseInt(cols),\n    };\n  }\n};\n\nexport interface ICol {\n  startTime: DateTime; //  睡眠開始時刻\n  endTime: DateTime; //  睡眠終了時刻\n  duration: Duration; //  Duration\n  sleepTime: Duration; //  睡眠時間\n  wakingInBed: Duration; //  ベッドで起きていた時間\n  timeToSleep: Duration; //  眠りにつくまでの時間\n  goodQuality: Duration; //  良質な睡眠\n  deepSleep: Duration; //  深い睡眠\n  heartRate: number; //  心拍数\n  tag: string; //  タグ\n  annotation: string; //  注釈\n}\n","import styled from \"styled-components\";\n\nexport const OuterContainer = styled.div`\n  margin-top: 2em;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-flow: column;\n`;\n\nexport const Title = styled.h1`\n  /* color: #ffffff; */\n`;\n\nexport const Message = styled.div`\n  /* color: #ffffff; */\n`;\n\nexport const Date = styled.div<{ dayOfWeek?: number }>`\n  color: ${(props) => dayOfWeekColor(props.dayOfWeek || 9999)};\n  font-weight: 500;\n  margin-top: 2px;\n  font-size: 2.25rem;\n`;\n\nexport const Frame = styled.div`\n  padding: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-flow: column;\n  height: 200px;\n  margin: 4px;\n  border-radius: 8px;\n  background: #eeeeee;\n`;\n\nexport const Days = styled.div`\n  width: calc(220px * 7);\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: flex-end;\n`;\n\nconst dayOfWeekColor = (dayOfWeek: number) => {\n  if (dayOfWeek === 6) {\n    return \"#0000dd\";\n  }\n  if (dayOfWeek === 7) {\n    return \"#dd0000\";\n  }\n  return \"black\";\n};\n","import { Duration } from \"luxon\";\nimport styled from \"styled-components\";\n\ninterface IDay {\n  duration: Duration | string;\n  sleepType?: string;\n}\n\nexport const DayUnit = ({ duration, sleepType }: IDay) => {\n  return (\n    <DayComponent duration={duration} sleepType={sleepType}>\n      {/* Duration | string のため string でないとき Duration 型になるので， その場合は toFormat で文字列へ */}\n      {typeof duration !== \"string\" ? duration.toFormat(\"hh:mm\") : duration}\n    </DayComponent>\n  );\n};\n\ninterface IDayDesign {\n  duration: string;\n  sleepType?: string;\n}\n\nconst DayComponent = styled.div<IDayDesign>`\n  color: rgba(0, 0, 0, 0.8);\n  font-weight: 500;\n  display: flex;\n  -webkit-align-items: center;\n  align-items: center;\n  -webkit-justify-content: center;\n  justify-content: center;\n  border-radius: 8px;\n  height: ${(props) => durationHeight(props.duration)};\n  width: 60px;\n  margin: 4px;\n  /* color: white; */\n  background: ${(props) => durationColor(props.duration, props.sleepType)};\n` as any;\n\nconst durationColor = (duration: Duration | string, sleepType?: string) => {\n  const durationNum =\n    typeof duration === \"string\" ? parseInt(duration) : duration.hours;\n  let color = \"#0099ff\";\n  if (sleepType === \"goodQuality\") {\n    color = \"#15ff00\";\n  }\n  if (sleepType === \"deepSleep\") {\n    color = \"#7700ff\";\n  }\n  if (durationNum >= 8) {\n    return color + \"FF\";\n  } else if (durationNum >= 6) {\n    return color + \"DD\";\n  } else if (durationNum >= 4) {\n    return color + \"BB\";\n  } else if (durationNum >= 2) {\n    return color + \"99\";\n  } else if (durationNum >= 0) {\n    return color + \"55\";\n  } else {\n    return \"#5e5e5edd\";\n  }\n};\n\nconst durationHeight = (duration: Duration | string) => {\n  const durationNum =\n    typeof duration === \"string\" ? parseInt(duration) : duration.hours;\n  return `${durationNum * 8 + 16}px`;\n};\n","import { DateTime } from \"luxon\";\nimport styled from \"styled-components\";\nimport { ICol } from \"../Logic/parseCSV\";\nimport { Days, Date, Frame } from \"./common-components\";\nimport { DayUnit } from \"./visualize/DayUnit\";\n\nexport const Calendar = ({\n  calendar,\n}: {\n  calendar: (string | ICol)[][] | null;\n}) => {\n  if (calendar) {\n    return (\n      <Days>\n        {calendar &&\n          calendar.flat().map((col: ICol | string) => {\n            if (typeof col !== \"string\" && col.endTime !== undefined) {\n              return (\n                <>\n                  <Frame>\n                    <DateHeader>\n                      <Date dayOfWeek={col.endTime.weekday}>\n                        {col.endTime.setLocale(\"jp\").toFormat(\"MM.dd\")}\n                      </Date>\n                      <TimesBox>\n                        <div>🛌{col.startTime.toFormat(\"HH:mm\")}</div>\n                        <div>🛏{col.endTime.toFormat(\"HH:mm\")}</div>\n                        <div>❤️{col.heartRate}</div>\n                      </TimesBox>\n                    </DateHeader>\n                    <div\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        alignItems: \"flex-end\",\n                      }}\n                    >\n                      <Unit>\n                        <DayUnit\n                          duration={col.sleepTime}\n                          sleepType=\"sleepTime\"\n                        />\n                      </Unit>\n                      <Unit>\n                        <DayUnit\n                          duration={col.goodQuality}\n                          sleepType=\"goodQuality\"\n                        />\n                      </Unit>\n                      <Unit>\n                        <DayUnit\n                          duration={col.deepSleep}\n                          sleepType=\"deepSleep\"\n                        />\n                      </Unit>\n                    </div>\n                  </Frame>\n                </>\n              );\n            } else {\n              return (\n                <Frame>\n                  <Date\n                    dayOfWeek={\n                      DateTime.fromFormat(col.toString(), \"yyyy-MM-dd-EEE\")\n                        .weekday\n                    }\n                  >{`${col\n                    .toString()\n                    .substring(5, 10)\n                    .replace(\"-\", \".\")}`}</Date>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"row\",\n                    }}\n                  >\n                    <div\n                      style={{\n                        width: \"204px\",\n                        height: \"100px\",\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        alignContent: \"center\",\n                        color: \"rgba(0,0,0,0.5)\",\n                      }}\n                    >\n                      データがありません\n                    </div>\n                  </div>\n                </Frame>\n              );\n            }\n          })}\n      </Days>\n    );\n  }\n  return null;\n};\n\nconst Unit = styled.div`\n  display: flex;\n  flex-flow: column;\n  justify-content: flex-end;\n  align-items: center;\n`;\n\nconst DateHeader = styled.div`\n  display: flex;\n  flex-flow: row;\n  justify-content: center;\n`;\n\nconst TimesBox = styled.div`\n  font-size: 0.75rem;\n  font-weight: 500;\n  margin-left: 1rem;\n`;\n","import { useEffect, useState } from \"react\";\nimport { FileInput } from \"./components/FileInput\";\nimport { ICol, parseCSV } from \"./Logic/parseCSV\";\nimport { Message, OuterContainer, Title } from \"./components/common-components\";\nimport { Calendar } from \"./components/Calendar\";\n\nexport const App = () => {\n  const [inputFile, setInputFile] = useState<File | undefined>();\n  const [readCSV, setReadCSV] = useState<string>(\"\");\n  const [calendar, setCalendar] = useState<(string | ICol)[][] | null>(null);\n\n  useEffect(() => {\n    if (inputFile) {\n      const reader = new FileReader();\n      reader.onload = () => setReadCSV(reader.result as string);\n      reader.readAsText(inputFile, \"UTF-8\");\n      setCalendar(parseCSV(readCSV));\n    }\n    if (readCSV) {\n      setCalendar(parseCSV(readCSV));\n    }\n  }, [inputFile, readCSV]);\n\n  return (\n    <>\n      <OuterContainer>\n        <Title>Sleepvis</Title>\n        <Message>\n          AutosleepアプリのCSVを可視化するWebアプリです．\n          <br />\n          日付の右隣の時刻は，上から順に，就寝時間，起床時間，心拍数となります．\n          <br />\n          青色は睡眠時間，緑色は良質な睡眠時間，紫色は深い睡眠時間を表しています．\n          <br />\n          ※推奨ディスプレイ：横幅が1920pixel以上\n        </Message>\n        <div style={{ display: \"flex\", flexFlow: \"row\", height: \"100%\" }}>\n          <FileInput setInputFile={setInputFile} />\n          <button onClick={() => setReadCSV(testData)}>\n            デモ(テストデータ)\n          </button>\n        </div>\n        <hr />\n        <Calendar calendar={calendar} />\n      </OuterContainer>\n    </>\n  );\n};\n\nconst testData = `睡眠時刻,Until,Duration,睡眠時間,ベッドで起きていた時間, 眠りにつくまでの時間,良質な睡眠,深い睡眠,心拍数,タグ,注釈\n2021-07-19 03:49:01,2021-07-19 15:04:00,11:14,10:09,1:05,0,6:43,1:29,57,--,--\n2021-07-20 04:15:00,2021-07-20 11:26:00,7:34,6:04,1:30,--,3:44,1:14,65,--,--\n2021-07-21 01:57:02,2021-07-21 07:57:00,5:59,4:32,1:27,1:27,3:25,1:30,55,--,--\n2021-07-22 02:30:00,2021-07-22 12:01:00,9:31,8:00,1:31,--,5:49,2:30,56,--,--\n2021-07-22 22:31:00,2021-07-23 07:58:00,9:27,8:11,1:16,--,6:15,1:59,56,--,--\n2021-07-25 01:43:00,2021-07-25 09:31:00,7:48,7:33,15,--,5:54,2:15,56,--,--\n2021-07-26 02:58:00,2021-07-26 05:32:00,2:34,2:34,0,--,1:56,46,52,--,--\n2021-07-29 00:56:00,2021-07-29 07:57:00,7:01,7:01,0,--,4:37,1:30,54,--,--\n2021-07-30 03:03:53,2021-07-30 05:51:00,2:47,2:40,7,7,2:12,1:04,54,--,--\n2021-07-31 01:46:00,2021-07-31 10:48:00,9:51,9:51,0,--,6:58,2:45,52,--,--`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}